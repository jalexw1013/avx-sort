<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:double="http://www.intel.com/2001/XMLSchema#double" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:str="http://exslt.org/strings" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal>
  <name>%MemoryAccessAtypeName</name>
  <shortName>%MemoryAccesAtypeShortName</shortName>
  <description>%MemoryAccesAtypeDescription</description>
  <abbreviation>macc</abbreviation>
  <alias>memory-access</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <property name="helpId">configs.memory_access_f1208</property>
 </internal>
 <prerequisites xsl:version="1.0" str:keep_str_namespace="" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:if test="contains(exsl:ctx('androidBoardPlatform', ''), 'sofia')">
   <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsNotApplicable')"/>
  </xsl:if>
  <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=group_generic,group_mic')"/>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:choose>
   <xsl:when test="(exsl:ctx('PMU') = 'core2') or (exsl:ctx('PMU') = 'core2p')">
    <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
     <defaultValue>%PMUEventsViewpointName</defaultValue>
    </stringKnob>
   </xsl:when>
   <xsl:when test="(exsl:ctx('PMU') = 'corei7b')">
    <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
     <defaultValue>%WSMEXBandwidthViewpointName</defaultValue>
    </stringKnob>
   </xsl:when>
   <xsl:otherwise>
    <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
     <defaultValue>%SNBBandwidthViewpointName</defaultValue>
    </stringKnob>
   </xsl:otherwise>
  </xsl:choose>
  <doubleKnob id="samplingInterval" displayName="%SamplingInterval" cliName="sampling-interval" boolean:visible="true">
   <description>%SamplingIntervalDescription</description>
   <double:min>0.01</double:min>
   <double:max>1000</double:max>
   <xsl:choose>
    <xsl:when test="exsl:ctx('PMU')='knl'">
     <double:defaultValue>10</double:defaultValue>
    </xsl:when>
    <xsl:otherwise>
     <double:defaultValue>1</double:defaultValue>
    </xsl:otherwise>
   </xsl:choose>
  </doubleKnob>
  <booleanKnob id="analyzeMemoryObjects" displayName="%AnalyzeMemoryObjects" boolean:visible="false" cliName="analyze-mem-objects">
   <xsl:if test="exsl:ctx('targetOS')='Linux' and exsl:ctx('PMU') != 'knc' and exsl:ctx('PMU') != 'core2' and                     exsl:ctx('PMU') != 'core2p' and exsl:ctx('PMU') != 'corei7b' and exsl:ctx('PMU') != 'silvermont' and                     exsl:ctx('PMU') != 'tangier' and exsl:ctx('PMU') != 'avoton' and exsl:ctx('PMU') != 'airmont'">
    <xsl:attribute name="boolean:visible">true</xsl:attribute>
   </xsl:if>
   <boolean:defaultValue>false</boolean:defaultValue>
   <description>%AnalyzeMemoryObjectsDescription</description>
  </booleanKnob>
  <intKnob id="memoryObjectMinSize" displayName="%MemoryObjectMinSize" boolean:visible="false" cliName="mem-object-size-min-thres">
   <xsl:if test="exsl:ctx('targetOS')='Linux' and exsl:ctx('PMU') != 'knc' and exsl:ctx('PMU') != 'core2' and exsl:ctx('PMU') != 'core2p' and                     exsl:ctx('PMU') != 'corei7b' and exsl:ctx('PMU') != 'silvermont' and exsl:ctx('PMU') != 'tangier' and                     exsl:ctx('PMU') != 'avoton' and exsl:ctx('PMU') != 'airmont'">
    <xsl:attribute name="boolean:visible">true</xsl:attribute>
   </xsl:if>
   <description>%MemoryObjectMinSizeDescription</description>
   <int:minValue>1</int:minValue>
   <int:defaultValue>1024</int:defaultValue>
  </intKnob>
  <booleanKnob id="dramBandwidthLimitsATT" displayName="%DramBandwidthLimits" cliName="dram-bandwidth-limits">
   <xsl:choose>
    <xsl:when test="(exsl:ctx('targetOS')='Windows' or exsl:ctx('targetOS')='Linux') and exsl:ctx('PMU') != 'knl'">
     <xsl:attribute name="boolean:visible">true</xsl:attribute>
     <boolean:defaultValue>true</boolean:defaultValue>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute name="boolean:visible">false</xsl:attribute>
     <boolean:defaultValue>false</boolean:defaultValue>
    </xsl:otherwise>
   </xsl:choose>
   <description>%DramBandwidthLimitsDescription</description>
  </booleanKnob>
  <booleanKnob id="enableMemoryObjectGrouper" displayName="%EnableMemoryObjectGrouper" boolean:visible="false" cliName="enable-mem-object-grouper">
   <boolean:defaultValue>false</boolean:defaultValue>
  </booleanKnob>
  <xsl:variable name="commonKnobs" select="document('config://analysis_type/include/knobs.xsl')"/>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='analyzeOpenMPRegions']"/>
 </knobs>
 <analysis xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:if test="not (       exsl:ctx('PMU') = 'snb'       or exsl:ctx('PMU') = 'ivybridge'       or exsl:ctx('PMU') = 'snbep'       or exsl:ctx('PMU') = 'ivytown'       or exsl:ctx('PMU') = 'haswell'       or exsl:ctx('PMU') = 'haswell_server'       or exsl:ctx('PMU') = 'crystalwell'       or exsl:ctx('PMU') = 'knc'       or exsl:ctx('PMU') = 'broadwell'       or exsl:ctx('PMU') = 'broadwell_de'       or exsl:ctx('PMU') = 'broadwell_server'       or exsl:ctx('PMU') = 'silvermont'       or exsl:ctx('PMU') = 'tangier'       or exsl:ctx('PMU') = 'avoton'       or exsl:ctx('PMU') = 'airmont'       or exsl:ctx('PMU') = 'skylake'       or exsl:ctx('PMU') = 'skylake_server'       or exsl:ctx('PMU') = 'knl'       or exsl:ctx('PMU') = 'goldmont'       )">
   <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsNotApplicable')"/>
  </xsl:if>
  <xsl:if test="exsl:ctx('PerfmonVersion', '4') = '0'">
   <xsl:value-of select="exsl:error('%PerfMonVersionWarning')"/>
  </xsl:if>
  <xsl:variable name="events" select="document('config://analysis_type/include/common_events.xsl')"/>
  <xsl:variable name="MainEvents" select="$events//events/cpi"/>
  <xsl:variable name="MemEvents" select="$events//events/memboundHPC"/>
  <xsl:variable name="MemAccessEvents" select="$events//events/memAccess"/>
  <collector id="runsa">
   <boolean:collectorKnob knob="cpuGpuUsageData">true</boolean:collectorKnob>
   <xsl:choose>
    <xsl:when test="exsl:ctx('targetOS')='Linux' and not(exsl:ctx('isSEPDriverAvailable', 0)) and                         (exsl:ctx('LinuxPerfCredentials', 'NotAvailable')='Kernel' or                          exsl:ctx('LinuxPerfCredentials', 'NotAvailable')='User')">
     <boolean:collectorKnob knob="collectMemBandwidth">false</boolean:collectorKnob>
     <xsl:value-of select="exsl:error('%PerfSystemWideNoPermAT')"/>
    </xsl:when>
    <xsl:otherwise>
     <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:if test="(exsl:ctx('PMU') = 'haswell' or exsl:ctx('PMU') = 'haswell_server' or exsl:ctx('PMU') = 'crystalwell') and                      (exsl:ctx('isHTEnabled', 0) or (exsl:ctx('logicalCPUCount', 1) &gt; exsl:ctx('physicalCoreCount', 1)))">
    <xsl:value-of select="exsl:warning('%HTisONAT')"/>
   </xsl:if>
   <boolean:collectorKnob knob="stackStitching">false</boolean:collectorKnob>
   <xsl:if test="exsl:ctx('targetOS')='Linux'">
    <collectorKnob knob="collectMemObjects">
     <xsl:copy-of select="exsl:ctx('analyzeMemoryObjects', 0)"/>
    </collectorKnob>
   </xsl:if>
   <collectorKnob knob="memoryObjectMinSize">
    <xsl:copy-of select="exsl:ctx('memoryObjectMinSize', 1024)"/>
   </collectorKnob>
   <xsl:if test="exsl:ctx('PMU') != 'knl' and exsl:ctx('dramBandwidthLimitsATT', 0)">
    <collectorKnob knob="dramBandwidthLimits">true</collectorKnob>
   </xsl:if>
   <collectorKnob knob="pmuEventConfig">
    <xsl:value-of select="$MainEvents"/>
    <xsl:if test="$MemAccessEvents != ''">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$MemAccessEvents"/>
    </xsl:if>
    <xsl:if test="$MemEvents != ''">
     <xsl:text>,</xsl:text>
     <xsl:value-of select="$MemEvents"/>
    </xsl:if>
   </collectorKnob>
   <collectorKnob knob="collectOpenMPRegions">
    <xsl:value-of select="exsl:ctx('analyzeOpenMPRegions', 0)"/>
   </collectorKnob>
  </collector>
 </analysis>
</bag>
